;;
(defwidget bar []
  (centerbox :orientation "v" :hexpand false
    (box :space-evenly false :valign "start" :halign "center" :vexpand true :hexpand false :orientation "v" :spacing 10
      (power)
      (box :class "system-status" :orientation "v" :spacing 10 :hexpand false :active false :vexpand false
      (mem)
      (cpu)
      (disk)
        )
      (wifi)
      )

    (workspaces :halign "center" :vexpand true :hexpand false :orientation "v")

    (box :valign "end" :hexpand false :vexpand true :orientation "v" :space-evenly false :spacing 10
      (battery)
      (time)
      ))
  )

(defpoll battery :interval "2s" "./scripts/battery.sh")

(defwidget screenshot []
  (box
    (screenshotmenu)
    )
  )


;; Variables
(defpoll temperature :interval "20m" "curl -s 'wttr.in/?format=%f'")

(defpoll wifi :interval "3s" "./scripts/wifi.sh")
(defpoll hour :interval "10s" "date +%H")
(defpoll minute :interval "10s" "date +%M")
(defpoll dateVar :interval "600s" "date '+%A %d.%m.%y'")
(deflisten workspaces_listen "./scripts/workspaces.sh")
(defvar screenshotpath "/tmp/screenshot.png")

(defvar screenshot false)
(defvar power false)
(defvar search false)
(defvar time false)
(defvar cal false)

;; Widgets

(defwidget mem []
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_RAM.used_mem_perc}
                        :class "membar"
                        :start-angle 0
                        :thickness 4
      (button
        :class "iconmem"
        :limit-width 2
        :tooltip " ${round(EWW_RAM.used_mem_perc,1)}%"
        :show_truncated false
        :wrap false
        "")
      ))
  )

(defwidget cpu []
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_CPU.avg}
                        :class "cpubar"
                        :start-angle 0
                        :thickness 4
      (button
        :class "iconmem"
        :limit-width 2
        :tooltip " ${round(EWW_CPU.avg,1)}%"
        :show_truncated false
        :wrap false
        "")
      ))
  )

(defwidget wifi []
 (box :vexpand false :hexpand false :orientation "v"
   (label :text {wifi.icon}
          :limit-width 10
          :tooltip {wifi.status}
          :class "label wifi")

   )
)

(defwidget battery []
 (box :vexpand false :hexpand false :orientation "v" :visible {battery.visible}
   (label :text "${battery.icon}"
          :limit-width 10
          :tooltip "${battery.percent}% ${EWW_BATTERY["BAT0"].status}"
          :class "label battery")

   )
)

(defwidget disk []
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_DISK["/"].used_perc}
                        :class "diskbar"
                        :start-angle 0
                        :thickness 4
      (button
        :class "iconmem"
        :limit-width 2
        :tooltip " ${round(EWW_DISK["/"].used_perc,1)}%"
        :show_truncated false
        :wrap false
        "")
      ))
  )
(defwidget power []
  (eventbox   :hexpand false
              :onhover "eww update power=true"
              :onhoverlost "eww update power=false"
              :cursor "hand"
    (box		:orientation "v"
                :space-evenly "false"
                :class "powerLabel label"

      (button		:class "nixos"
                    :onclick "rofi -show drun &"	"󱄅")
      (revealer	:transition "slidedown"
                :reveal power
                :duration "250ms"
        (box        :space-evenly true :orientation "v"
          (button		:class "button-off"
                        :onclick "shutdown now" "󰐥")
          (button		:class "button-lock"
                        :onclick "lockscreen" "󱅞")
          (button		:class "button-sleep"
                        :onclick "systemctl suspend" "󰤄"))
        ))))

(defvar volume-hidden false)
(defvar volume-level 50)
(defvar volume-muted false)
(defwindow volume
  :monitor 0
  :geometry (geometry :y "100px" :x "0px" :width "250px" :height "200px" :anchor "center bottom")
  :windowtype "dock"
  :wm-ignore true
  :stacking "fg"

  (box :class "volume-window"
       :orientation "v"
       :space-evenly "false"
    (box :class "volume-spacer" :style {volume-hidden ? "padding-top: 100px;" : "padding-top: 30px;"})
    (box :class "volume-widget"
         :orientation "h"
         :space-evenly false
         :spacing 10
      (label :text {volume-muted ? ""
                    volume-level == 0 ? "" :
                    volume-level < 32 ? "" :
                    volume-level < 65 ? "" :
                    ""}

             :class 'volume-icon ${volume-muted ? "volume-icon-muted" : ""}'
      )
      (scale :class 'volume-slider ${volume-muted ? "volume-slider-muted" : ""}'
             :hexpand "true"
             :min 0
             :max 100
             :height 8
             :marks true
             :value volume-level
             :onchange "pamixer --set-volume {}"))))

(defwidget time []
  (eventbox :cursor "hand"  :hexpand false
                :tooltip "${dateVar}"
    (box :orientation "v" :hexpand false :vexpand false :space-evenly false :class "clock"
    (button		:class "date"
                :orientation "v"
                :onclick "eww open --toggle calendar"	"${hour}")

    (button		:class "date"
                :orientation "v"
                :onclick "eww open --toggle calendar"	"${minute}")
    )
    )
  )


(defvar bright-hidden false)
(defvar bright-level 50)
(defvar bright-muted false)
(defwindow brightness
  :monitor 0
  :geometry (geometry :y "100px" :x "0px" :width "250px" :height "200px" :anchor "center bottom")
  :windowtype "dock"
  :wm-ignore true
  :stacking "fg"

  (box :class "volume-window"
       :orientation "v"
       :space-evenly "false"
    (box :class "volume-spacer" :style {volume-hidden ? "padding-top: 100px;" : "padding-top: 30px;"})
    (box :class "volume-widget"
         :orientation "h"
         :space-evenly false
         :spacing 10
      (label :text ""
             :class 'volume-icon}'
      )
      (scale :class 'volume-slider ${volume-muted ? "volume-slider-muted" : ""}'
             :hexpand "true"
             :min 0
             :max 100
             :height 8
             :marks true
             :value volume-level
             :onchange "brightnessctl --set {}%"))))



(defwidget workspaces []
  (literal :content workspaces_listen))

(defwidget screenshotpreview []
  (box :class "sspreview" :hexpand true :vexpand true :style "background-image: url('${screenshotpath}');")
  )
(defwidget screenshotmenu []
  (box :orientation "v"
    (box :vexpand true :hexpand true :orientation "h"
      (label :text "Screenshot taken!" :class "ss-text")
      )
    (box :orientation "h"
      (button       :class "ss-upload ss"
                    :tooltip "Upload screenshot"
                    :onclick "./scripts/ss.sh upload &" "")
      (button       :class "ss-win ss"
                    :tooltip "Save screenshot"
                    :onclick "./scripts/ss.sh save &" "")
      (button       :class "ss-copy ss"
                    :tooltip "Copy screenshot"
                    :onclick "./scripts/ss.sh copy &" "")
      (button       :class "ss-discard ss"
                    :tooltip "Discard screenshot"
                    :onclick "./scripts/ss.sh discard &" "")
      ))
  )

(defwidget screenshottool []
  (box
    (button       :class "ss-area ss"
                  :tooltip "Select area"
                  :onclick "./scripts/ss.sh area &" "")
    (button       :class "ss-screen ss"
                  :tooltip "Whole screen"
                  :onclick "./scripts/ss.sh screen &" "")
    (button       :class "ss-win ss"
                  :tooltip "Window"
                  :onclick "./scripts/ss.sh window &" "")
    (button       :class "ss-cancel ss"
                  :tooltip "Cancel"
                  :onclick "eww close screenshottool &" "")
    )
  )

(defwindow calendar
  :geometry (geometry :x "-20px"
  :y "7%"
  :width "270px"
  :height "60px"
  :anchor "top right")
  (calendar :class "cal")
  )
(defwindow screenshot
  :geometry (geometry :x "-50px" :y "-50px"
  :width "500px"
  :height "400px"
  :anchor "bottom right")
  (box :space-evenly false :orientation "v"
    (screenshot)
    (screenshotpreview)
    ))

(defwindow screenshottool
  :geometry (geometry :x "-50px" :y "-50px"
  :width "500px"
  :height "60"
  :anchor "bottom right")
  (box :space-evenly false :orientation "v"
    (screenshottool)
    ))

(defwindow bar
  :monitor 0
  :reserve (struts :distance "50px" :side "left")
  :geometry (geometry :height "100%"
  :width "50px"
  :anchor "top left")
  :hexpand false
  :stacking "bg"
  :vexpand false
  :wm-ignore false
  (bar))
